// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain
//#pragma exclude_renderers d3d11_9x


struct SubChunk
{
	float value;
};

RWStructuredBuffer<SubChunk> subChunks;

RWTexture2D<float> Result;

int subchunk_x;
int subchunk_y;
int subchunk_z;

int chunk_x;
int chunk_z;
float seedoffset_x;
float seedoffset_z;
float PerlinScale1;
float PerlinStrength1;
float PerlinYScale1;
float PerlinScale2;
float PerlinStrength2;
float PerlinYScale2;
float PerlinScale3;
float PerlinStrength3;
float PerlinYScale3;
float MagnitudeCurve[64];
float HeightCurve[64];

float mod(float x, float y)
{
    return x - y * floor(x / y);
}

float3 mod(float3 x, float y)
{
    return float3(x.x - y * floor(x.x / y), x.y - y * floor(x.y / y), x.z - y * floor(x.z / y));
}

float4 mod(float4 x, float y)
{
    return float4(x.x - y * floor(x.x / y), x.y - y * floor(x.y / y), x.z - y * floor(x.z / y), x.w - y * floor(x.w / y));
}

//	Classic Perlin 3D Noise 
//	by Stefan Gustavson
//
float4 permute(float4 x)
{
    return mod(((x * 34.0) + 1.0) * x, 289.0);
}
float4 taylorInvSqrt(float4 r)
{
    return 1.79284291400159 - 0.85373472095314 * r;
}
float3 fade(float3 t)
{
    return t * t * t * (t * (t * 6.0 - 15.0) + 10.0);
}

float cnoise(float3 P)
{
    float3 Pi0 = floor(P); // Integer part for indexing
    float3 Pi1 = Pi0 + float3(1.0, 1.0, 1.0); // Integer part + 1
    Pi0 = mod(Pi0, 289.0);
    Pi1 = mod(Pi1, 289.0);
    float3 Pf0 = frac(P); // fracional part for interpolation
    float3 Pf1 = Pf0 - float3(1.0, 1.0, 1.0); // fracional part - 1.0
    float4 ix = float4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);
    float4 iy = float4(Pi0.yy, Pi1.yy);
    float4 iz0 = Pi0.zzzz;
    float4 iz1 = Pi1.zzzz;

    float4 ixy = permute(permute(ix) + iy);
    float4 ixy0 = permute(ixy + iz0);
    float4 ixy1 = permute(ixy + iz1);

    float4 gx0 = ixy0 / 7.0;
    float4 gy0 = frac(floor(gx0) / 7.0) - 0.5;
    gx0 = frac(gx0);
    float4 gz0 = float4(0.5, 0.5, 0.5, 0.5) - abs(gx0) - abs(gy0);
    float4 sz0 = step(gz0, float4(0.0, 0.0, 0.0, 0.0));
    gx0 -= sz0 * (step(0.0, gx0) - 0.5);
    gy0 -= sz0 * (step(0.0, gy0) - 0.5);

    float4 gx1 = ixy1 / 7.0;
    float4 gy1 = frac(floor(gx1) / 7.0) - 0.5;
    gx1 = frac(gx1);
    float4 gz1 = float4(0.5, 0.5, 0.5, 0.5) - abs(gx1) - abs(gy1);
    float4 sz1 = step(gz1, float4(0.0, 0.0, 0.0, 0.0));
    gx1 -= sz1 * (step(0.0, gx1) - 0.5);
    gy1 -= sz1 * (step(0.0, gy1) - 0.5);

    float3 g000 = float3(gx0.x, gy0.x, gz0.x);
    float3 g100 = float3(gx0.y, gy0.y, gz0.y);
    float3 g010 = float3(gx0.z, gy0.z, gz0.z);
    float3 g110 = float3(gx0.w, gy0.w, gz0.w);
    float3 g001 = float3(gx1.x, gy1.x, gz1.x);
    float3 g101 = float3(gx1.y, gy1.y, gz1.y);
    float3 g011 = float3(gx1.z, gy1.z, gz1.z);
    float3 g111 = float3(gx1.w, gy1.w, gz1.w);

    float4 norm0 = taylorInvSqrt(float4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));
    g000 *= norm0.x;
    g010 *= norm0.y;
    g100 *= norm0.z;
    g110 *= norm0.w;
    float4 norm1 = taylorInvSqrt(float4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));
    g001 *= norm1.x;
    g011 *= norm1.y;
    g101 *= norm1.z;
    g111 *= norm1.w;

    float n000 = dot(g000, Pf0);
    float n100 = dot(g100, float3(Pf1.x, Pf0.yz));
    float n010 = dot(g010, float3(Pf0.x, Pf1.y, Pf0.z));
    float n110 = dot(g110, float3(Pf1.xy, Pf0.z));
    float n001 = dot(g001, float3(Pf0.xy, Pf1.z));
    float n101 = dot(g101, float3(Pf1.x, Pf0.y, Pf1.z));
    float n011 = dot(g011, float3(Pf0.x, Pf1.yz));
    float n111 = dot(g111, Pf1);

    float3 fade_xyz = fade(Pf0);
    float4 n_z = lerp(float4(n000, n100, n010, n110), float4(n001, n101, n011, n111), fade_xyz.z);
    float2 n_yz = lerp(n_z.xy, n_z.zw, fade_xyz.y);
    float n_xyz = lerp(n_yz.x, n_yz.y, fade_xyz.x);
    return 2.2 * n_xyz;
}

float EvaluateCurve(float curve[64], float time)
{
	return curve[int(clamp(time, 0, 1) / 64)];
}

[numthreads(5, 4, 5)]

void CSMain(uint3 id : SV_DispatchThreadID)
{
	//SubChunk subChunk = subChunks[id.x + id.y * 17 + id.z * 256];
	
    float3 offset = float3((chunk_x * 16) + (id.x * 4) + (subchunk_x * 4) + seedoffset_x, 0 + (subchunk_y * 4), (chunk_z * 16) + (id.z * 4) + (subchunk_z * 4) + seedoffset_z);
	float value = 0;
	float3 worldpos;
	
	
	
	/*
	[loop][allow_uav_condition]
    for (uint i = 0; i < 100; i++)
	{
		uint x = i % 5;
		uint y = i / 5 % 4;
		uint z = i / 20;
		
		worldpos = float3(x + offset.x, y + offset.y, z + offset.z);
        value = cnoise(float3(worldpos.x * PerlinScale1, worldpos.y * PerlinScale1 * PerlinYScale1, worldpos.z * PerlinScale1)) * PerlinStrength1 + cnoise(float3(worldpos.x * PerlinScale2, worldpos.y * PerlinScale2 * PerlinYScale2, worldpos.z * PerlinScale2)) * PerlinStrength2 + cnoise(float3(worldpos.x * PerlinScale3, worldpos.y * PerlinScale3 * PerlinYScale3, worldpos.z * PerlinScale3)) * PerlinScale3;

		value = clamp(value * EvaluateCurve(MagnitudeCurve, float(y) / 256), -1, 1);
		value = ((value + 1) * EvaluateCurve(HeightCurve, float(y) / 256)) - 1;

		//subChunk.value[i] = double(value);
		
        int index = id.x * 100 + id.y * 400 + id.z * 25600 + i;
        int2 pos = int2(index % 320, index / 320);
		
        Result[pos] = (value + 1) / 2;
    }
    */
	
    worldpos = float3(id.x + offset.x, id.y + offset.y, id.z + offset.z);
    value = cnoise(float3(worldpos.x * PerlinScale1, worldpos.y * PerlinScale1 * PerlinYScale1, worldpos.z * PerlinScale1)) * PerlinStrength1 + cnoise(float3(worldpos.x * PerlinScale2, worldpos.y * PerlinScale2 * PerlinYScale2, worldpos.z * PerlinScale2)) * PerlinStrength2 + cnoise(float3(worldpos.x * PerlinScale3, worldpos.y * PerlinScale3 * PerlinYScale3, worldpos.z * PerlinScale3)) * PerlinScale3;

    value = clamp(value * EvaluateCurve(MagnitudeCurve, float(worldpos.y) / 256), -1, 1);
    value = clamp(((value + 1) * EvaluateCurve(HeightCurve, float(worldpos.y) / 256)) - 1, -1, 1);

	subChunks[id.x + id.y * 5 + id.z * 5 * 4].value = value;
}